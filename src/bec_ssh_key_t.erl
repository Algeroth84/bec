%%==============================================================================
%% Type definition for the SSH Key data structure
%%==============================================================================
-module(bec_ssh_key_t).

%%==============================================================================
%% Exports
%%==============================================================================
-export([ from_map/1, to_map/1]).

-include("bitbucket.hrl").

%%==============================================================================
%% Types
%%==============================================================================
-type id()              :: integer().
-type text()            :: binary().
-type permission_type() :: 'REPO_READ' | 'REPO_WRITE'.
-type key()             :: #{ id         => id()
                            , permission := permission_type()
                            , text       := text()
                            }.

%%==============================================================================
%% Export Types
%%==============================================================================
-export_type([ id/0
             , key/0
             ]).

%%==============================================================================
%% API
%%==============================================================================
-spec from_map(map()) -> key().
from_map(#{ <<"key">>        := #{ <<"id">>   := Id
                                 , <<"text">> := Text}
          , <<"permission">> := Permission
          }) ->
  #{ id         => Id
   , permission => binary_to_atom(Permission, utf8)
   , text       => Text
   }.

-spec to_map(key()) -> map().
to_map(#{ permission := Permission
        , text       := Text
        }) ->
  #{ <<"key">>        => #{ <<"text">> => Text }
   , <<"permission">> => Permission
   }.

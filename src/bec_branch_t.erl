%%==============================================================================
%% Type definition for the Branch data structure
%%==============================================================================
-module(bec_branch_t).

%%==============================================================================
%% Exports
%%==============================================================================
-export([ from_map/1, to_map/1]).

-include("bitbucket.hrl").

%%==============================================================================
%% Types
%%==============================================================================
-type id()     :: binary().
-type branch() :: #{ id => id() }.

%%==============================================================================
%% Export Types
%%==============================================================================
-export_type([ branch/0
             , id/0
             ]).

%%==============================================================================
%% API
%%==============================================================================
-spec from_map(map()) -> branch().
from_map(#{ <<"id">> := Id }) ->
  #{ id => strip_prefix(Id) }.

-spec to_map(branch()) -> map().
to_map(#{ id := Id }) ->
  #{ <<"id">> => Id }.

%%==============================================================================
%% Internal Functions
%%==============================================================================
-spec strip_prefix(id()) -> id().
strip_prefix(<<"refs/heads/", Id/binary>>) -> Id;
strip_prefix(Id) when is_binary(Id)        -> Id.

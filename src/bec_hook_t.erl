%%==============================================================================
%% Type definition for the Hook data structure
%%==============================================================================
-module(bec_hook_t).

%%==============================================================================
%% Exports
%%==============================================================================
-export([ from_map/1, to_map/1]).

-include("bitbucket.hrl").

%%==============================================================================
%% Types
%%==============================================================================
-type key()  :: binary().
-type hook() :: #{ key      := key()
                 , enabled  := boolean()
                 , settings => bec_hook_settings_t:settings()
                 }.

%%==============================================================================
%% Export Types
%%==============================================================================
-export_type([ hook/0
             , key/0
             ]).

%%==============================================================================
%% API
%%==============================================================================
-spec from_map(map()) -> hook().
from_map(#{ <<"details">> := #{ <<"key">> := Key }
          , <<"enabled">> := Enabled
          }) ->
  #{ key     => Key
   , enabled => Enabled
   }.

-spec to_map(hook()) -> map().
to_map(#{ key     := Key
        , enabled := Enabled
        }) ->
  #{ <<"details">> => #{ <<"key">> => Key }
   , <<"enabled">> => Enabled
   }.
